%!PS PostScript document

% author:  bg nerilex
% email:   bg@nerilex.org
% date:    2017-09-17
% license: GPLv3 

%    Copyright (C) 2008 - 2017 bg nerilex
%
%    This program is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    This program is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program.  If not, see <http://www.gnu.org/licenses/>.

%
% pi = 4*S(1) - 2*S(4) - S(5) - S(6)
%
% S(j) = sum{k = 0 to infinite}{ (1 / 16**k) * (1 / (8*k + j)) }
/starttime usertime def

systemdict /runlibfile known not {
	/runlibfile /run cvx def
} if

currentdict /__cheat_hex_inc_ps__ known not {
	(cheat_hex.ps) runlibfile
} if

/pi_hex_digit_cheat /pi_hex_digit load def
/pi_hex_digit where { /pi_hex_digit undef } if

currentdict /__trigo_inc_ps__ known not {
	(trigo.inc.ps) runlibfile
} if

currentdict /__paper_inc_ps__ known not {
	(paper.inc.ps) runlibfile
} if

currentdict /__aux_inc_ps__ known not {
	(aux.inc.ps) runlibfile
} if

currentdict /__test_inc_ps__ known not {
	(test.inc.ps) runlibfile
} if

print_profile

/bits_per_digit 4 def

/digits_per_int bits_per_int bits_per_digit idiv def


/M 1 bits_per_int bits_per_digit 2 mul 1 add sub bitshift def

% b e m -- ((b**e) mod m)
/pow_mod {
	3 1 roll % m b e 
	1 % the accumulator
	{
		% m b e a
		exch % m b a e
		dup -1 bitshift exch % m b a e' e
		1 and 1 eq
		{
			4 1 roll % e' m b a
			1 index mul % e' m b a' 
			2 index mod % e' m b a'
		} {
			4 1 roll % e' m b a
		} ifelse
		exch dup mul % e' m a' b' 
		2 index mod  % e' m a' b'
		exch % e' m b' a'
		4 -1 roll  % m b' a' e'
		dup 0 eq { exit } if
		exch
	} loop
	% m b' a' e'
	pop
	3 -1 roll % b' a' m
	mod 
	exch pop
} def

/pow16_mod {
	16
	3 1 roll
	pow_mod
} def

% x -- frac(x)
% returns the fractional part of x
/frac {
	dup truncate sub
} def

/SHIFT bits_per_int bits_per_digit idiv 1 sub bits_per_digit mul def
%/SHIFT 27 def
% n j -- S_j(n)
/Sx
  {
  	% n m(=j)
  	0 % accu
  	0 1 4 index { % n m accu 0 1 n % for (k in [0 .. n])
  		% n m accu k
  		3 index exch sub % n m accu (n - k)
  		16 exch 3 index % n m accu 16 (n - k) m
  		pow_mod % n m accu X
  		2 index div % n m accu (X / m)
  		frac % n m accu frac(X / m)
  		add % n m accu'
  		frac
  		exch 8 add exch % n m' accu'
  	} for
  	% n m' accu
  	1 % n m' accu v
	{
		16 div % n m accu v'
		dup 3 index % n m accu v' v' m
		div % n m accu v' s
		dup 0 eq { exit } if
		3 -1 roll % n m v' s accu
		add % n m v' accu'
		frac
		3 -1 roll % n v' accu' m
		8 add % n v' accu' m'
		3 1 roll % n m' v' accu'
		exch % n m' accu' m' 
	} loop
	% n m accu v' s
	5 -2 roll % accu v' s n m
	pop pop pop pop % accu
	frac
  } def


/DEBUG false def
/S1x { DEBUG { (\nDBG: S1[) print _aprint (] = ) print} if 1 Sx DEBUG { _aprint } if } def
/S4x { DEBUG { (\nDBG: S4[) print _aprint (] = ) print} if 4 Sx DEBUG { _aprint } if } def
/S5x { DEBUG { (\nDBG: S5[) print _aprint (] = ) print} if 5 Sx DEBUG { _aprint } if } def
/S6x { DEBUG { (\nDBG: S6[) print _aprint (] = ) print} if 6 Sx DEBUG { _aprint (\n) print} if } def


% n -- x % x is the n-th digit of pi
/pi_hex_digit {
	1 sub
	dup dup dup % n n n n
    S1x 4 mul   % n n n x1
    frac
    exch        % n n x1 n
	S4x 2 mul frac sub frac % n n x2
	exch        % n x2 n
	S5x sub     % n x3
    frac
	exch        % x3 n
	S6x sub     % x4
  	frac % frac(accu)
	dup 0 lt { 1 add } if
	16 mul 
	% to do rounding, we add the minimum delta
	1.0 1 float_mantissa_bits 6 sub bitshift div add
%	dup = 
	cvi
	16#0f and
%	1 SHIFT bitshift 1 sub and
%	SHIFT 4 sub -1 mul bitshift
} def

/DEBUG true def
%4328 3 verbose_test
/DEBUG false def

test_pi_hex_digit

false {
	1 1 16 {
		% c
		(16**0 mod ) print
		dup 5 string cvs print
		( = ) print
		0 exch pow16_mod =
	} for
} if

false {
	1 1 16 {
		% c
		(16**1 mod ) print
		dup 5 string cvs print
		( = ) print
		1 exch pow16_mod =
	} for
} if

false {
	1 1 16 {
		% c
		(16**2 mod ) print
		dup 5 string cvs print
		( = ) print
		2 exch pow16_mod =
	} for
} if
