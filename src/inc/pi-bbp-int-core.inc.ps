%!PS PostScript document

% author:  bg nerilex
% email:   bg@nerilex.org
% date:    2017-09-17
% license: GPLv3 

%    Copyright (C) 2008 - 2017 bg nerilex
%
%    This program is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    This program is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program.  If not, see <http://www.gnu.org/licenses/>.

%
% pi = 4*S(1) - 2*S(4) - S(5) - S(6)
%
% S(j) = sum{k = 0 to infinite}{ (1 / 16**k) * (1 / (8*k + j)) }

/starttime usertime def

systemdict /runlibfile known not {
	/runlibfile /run cvx def
} if

currentdict /__cheat_hex_inc_ps__ known not {
	(cheat_hex.ps) runlibfile
	/pi_hex_digit_cheat /pi_hex_digit load def
	/pi_hex_digit where { /pi_hex_digit undef } if
} if

currentdict /__trigo_inc_ps__ known not {
	(trigo.inc.ps) runlibfile
} if

currentdict /__paper_inc_ps__ known not {
	(paper.inc.ps) runlibfile
} if

currentdict /__aux_inc_ps__ known not {
	(aux.inc.ps) runlibfile
} if

/bits_per_int
1 1 
{
  dup 0 le { pop exit } if
  exch 1 add
  exch 1 bitshift
} loop def

(useable bits in an integer: ) print
bits_per_int 20 string cvs print
(\n) print

/bits_per_digit 4 def

/digits_per_int bits_per_int bits_per_digit idiv def

% x -- len(x)
/bitlength {
	% x
	0
	{
		% x a
		exch dup % a x x
		0 eq { exit } if
		-1 bitshift % a x'
		exch        % x' a
		1 add       % x' a'
	} loop
	pop
} def

% x n -- x*(2**n)
/fbitshift {
	dup 0 ge 
	{
		% x n
		{
			2 mul
		} repeat
	}
	{
		neg % x -n
		{
			2 div
		} repeat
	} ifelse
} def

/M 1 bits_per_int bits_per_digit 2 mul 1 add sub bitshift def

% b e m -- ((b**e) mod m)
/pow_mod {
	3 1 roll % m b e 
	1 % the accumulator
	{
		% m b e a
		exch % m b a e
		dup -1 bitshift exch % m b a e' e
		1 and 1 eq
		{
			4 1 roll % e' m b a
			1 index mul % e' m b a' 
			2 index mod % e' m b a'
		} {
			4 1 roll % e' m b a
		} ifelse
		exch dup mul % e' m a' b' 
		2 index mod  % e' m a' b'
		exch % e' m b' a'
		4 -1 roll  % m b' a' e'
		dup 0 eq { exit } if
		exch
	} loop
	% m b' a' e'
	pop
	3 -1 roll % b' a' m
	mod 
	exch pop
} def

% x -- rev(x)
% prefixes the reversed bitstring with a single '1'-bit 
/bitreverse {
	1 % x a
	exch
	{
		% a x
		dup 0 eq { exit } if
		dup 1 and % a x lsb(x)
		3 -1 roll % x lsb(x) a
		1 bitshift add % x a'
		exch % a' x
		-1 bitshift % a' x'
	} loop
	pop
} def

% e m -- ((16**e) mod m)
/pow16_mod {
	/modulus exch def
	% e 
%	(reverse e\() print dup 20 string cvs print (\) = ) print flush
	bitreverse % e'
%	dup = flush
	1 % the accumulator
	{
		% e a
		1 index % e a e
		1 eq { exit } if
		dup mul % e a'
		modulus mod  % e a'
		exch % a' e
		dup -1 bitshift exch % a' e' e
		1 and 1 eq
		{
			% a' e'
			exch % e' a'
			16 mul modulus mod % e' a''
		} {
			exch % e' a''
		} ifelse
	} loop
	% e a
	exch
	pop
} def

/MAX_b 1 bits_per_int 1 sub bitshift def


/SHIFT bits_per_int bits_per_digit idiv 4 sub bits_per_digit mul def
%/SHIFT 27 def


% n j -- S_j(n)
% S(j,n) :=   SUM(k=0; k<=n; 16**(n - k) mod (8 * k +j) / (8 * k + j)) 
%           + SUM(k=n+1; k < infinity; 16**(n - k) / (8 * k + j)
(SHIFT = ) print SHIFT =
/x_shift SHIFT def

/Sx
  {
  	% n m(=j)
  	/x_shift
  	  2 index	% -- n j /xshift n
  	  dup 0 lt { pop 0 } if
	  bitlength
	  8 add bits_per_int exch sub
    def
%%  	(x_shift = ) print x_shift =
  	0 % n j accu
  	0 1 4 index 
  	% n m accu 0 1 n % for (k in [0 .. n]) 
  	{
  		% n m accu k
  		3 index exch sub % n m accu (n - k)
  		2 index % n m accu (n - k) m
%%  		1 index (exp: ) print 20 string cvs print ( mod: ) print dup =
  		pow16_mod % n m accu X'
%%  		(pre-fbitshift: ) print dup xprint (\n) print
		x_shift bitshift  % n m accu X
%%  		(post-fbitshift: ) print dup xprint (\n) print
  		2 index 
%%  		(m: ) print dup =
  		idiv  cvi % n m accu (X / m)
%%  		(post-cvi: ) print dup xprint(\n) print
  		add % n m accu'
%%	  	1 x_shift bitshift 1 sub and % mask accu
%%  		(masked accu: ) print dup xprint(\n) print
  		exch 8 add exch % n m' accu'
  	} for
%  	SHIFT x_shift sub bitshift
%%	(right sum: ) print dup xprint (\n) print
  	% n m' accu
  	1 x_shift 4 sub bitshift % n m' accu 1<<(x_shift - 4)
  	0 4 x_shift 2 mul %% XXX raising the limit to increase precision?
	{
		% n m accu v c
		pop 
		% n m accu v
		dup -4 bitshift % n m accu v v'
		4 -1 roll % n accu v v' m
		dup 8 add % n accu v v' m m'
		4 1 roll  % n accu m' v v' m
		3 -1 roll % n accu m' v' m v
		exch idiv % n accu m' v' X
%%		(X: ) print dup xprint (\n) print
		4 -1 roll % n m' v' X accu
		add       % n m' v' accu'
%%		(accu': ) print dup xprint (\n) print
		exch      % n m' accu' v'
		dup 0 eq { exit } if
	} for
	% n m' accu' v'
	pop
	% n m' accu'
	3 1 roll % accu n m'
	pop pop
  	% accu
%%	(pre-masked: ) print dup xprint (\n) print
  	1 x_shift bitshift 1 sub 
%%	(mask: ) print dup xprint (\n) print
  	and 
%%	(masked: ) print dup xprint (\n) print
  	SHIFT x_shift sub bitshift
  } def


/S1x { 1 Sx } def
/S4x { 4 Sx } def
/S5x { 5 Sx } def
/S6x { 6 Sx } def

% n -- x % x is the n-th digit of pi
/pi_hex_digit {
	1 sub
	/n exch def
    n S1x 4 mul     % x1
	n S4x 2 mul sub % x2
	n S5x sub       % x3
	n S6x sub       % x4
%	1 SHIFT mul bitshift
%	 1 sub and
	
	SHIFT 4 sub -1 mul bitshift
	16#0f and
} def

/test_pi_hex_digit {
	(\n== test_pi_hex_digit ==\n) print
 	/errorcnt 0 def
 	/successcnt 0 def
	 0 1 pi_hex_cheat_digits_num {
	 	/ctr exch def
		ctr 64 mod 0 eq 
		{
			(\n  [) print
			ctr cvs32 dup % "ctr" "ctr" 
			length 5 exch sub % "ctr"  5-len("ctr")
			(     ) 0 
			3 -1 roll
			getinterval print print
			(]: ) print
		} if
		flush
	 	
		ctr pi_hex_digit
		ctr pi_hex_digit_cheat % c c a b
		eq { 
			/successcnt successcnt 1 add def
			(*) print
		} {
			/errorcnt errorcnt 1 add def
			(\nError @ ) print ctr cvs32 print 
			( is: )      print ctr pi_hex_digit xprint
			( should: )  print ctr pi_hex_digit_cheat xprint
			( \(#) print errorcnt cvs32 print (\)\n  ) print
			flush
		} ifelse % c c
	} for
	(\n Errors:  ) print errorcnt cvs32 print (\n  ) print
	( Success: ) print successcnt cvs32 print (\n  ) print
} def

test_pi_hex_digit

/errorLocations [
2270 2910 3170 3310 3950 4300 5269 5270 5610 5770 6300 7260 7360 7470 7600 8250 
8270 8550 9980 10100 10790 11440 11650 11970 11990 12310 12390 12500 13250 
13420 14380 15360 15770 15790 15840 15900 16000 16060 16320 16430 16800 16880 
17010 18110 18250 18450 18650 18730 18960 19040 19070 19140 19250 19300 19480 
19650 20340 20440 20670 20890 21050 21330 21460 21690 21900 21940 22000 22330 
23160 24030 24040 24100 24150 24270 24550 24650 24780 24820 25049 25050 26300 
26480 26710 27130 27250 27399 27400 27490 27970 28490 28640 28780 28960 28990 
29560 29600 29610 30170 30330 30660 31180 31270 31470 31530 31940 32590 32950 
32960 33100 33260 33510 33530 33670 33800 34320 34350 34530 34550 34600 34799 
34800 34920 35010 35080 35350 35540 35760 35840 35889 35890 36010 36110 36650 
36900 37190 37310 37410 37620 37829 37830 38130 38450 38660 38740 38870 39180 
39270 39299 39300 39549 39550 39560 39620 39660 40310 40550 40780 40840 40910 
41010 41090 41310 41350 41550 41620 41640 41690 41810 41890 41930 42160 42279 
42280 42480 42590 42870 42880
] def

false {
 0 1 1 index pi_hex_cheat_digits_num add {
	dup dup dup  % c c c c
	pi_hex_digit % c c c a
	exch         % c c a c
	pi_hex_digit_cheat % c c a b
	dup 2 index  % c c a b b a
	xprint       % c c a b b
	3 -1 roll    % c c b b a
	eq { (*) print pop } { (#) print xprint } ifelse % c c
	0 eq { (.) print } if % c
	( ) print
	dup 0 ne exch
	10 mod 0 eq and { (\n  ) print } if
	flush
} for
} if

false {
	1000 1000 10000 {
		/ctr exch def
		( @n=) print ctr 20 string cvs print ( : ) print
		{	
			ctr
			pi_hex_digit
			xprint
		} time_measure
		flush
	} for
	(\n  ) print

} if

false {
	( @n=10000 : ) print
	10000 1 1 index 16 add {
		pi_hex_digit % c c c a
		xprint       % c c a b b
		flush
	} for
	(\n  ) print

	( @n=10e6 : ) print
	1000000 1 1 index 16 add {
		pi_hex_digit % c c c a
		xprint       % c c a b b
		flush
	} for
	(\n  ) print

	( @n=10e7 : ) print
	10000000 1 1 index 16 add {
		pi_hex_digit % c c c a
		xprint       % c c a b b
		flush
	} for
	(\n  ) print
} if

false {
0 1 1 index 30 add {
	dup dup dup  % c c c c
	pi_hex_digit % c c c a
	exch         % c c a c
	pi_hex_digit_cheat % c c a b
	dup 2 index  % c c a b b a
	xprint       % c c a b b
	3 -1 roll    % c c b b a
	eq { (*) print pop } { xprint } ifelse
	0 eq { (.) print } if
	dup 0 ne exch
	10 mod 0 eq and { (\n  ) print } if
} for
} if

% n j -- 
/pSx {
	(S) print
	% n j
	dup 1 string cvs print
	% n j
	1 index
	% n j n
	(\() print 20 string cvs print (\) = ) print
	% n j
	Sx
	xprint
} def

% n
/pSall {
	1 sub
	/n exch def
	(\t) print
	n 1 pSx
	(\t) print
	n 4 pSx
	(\t) print
	n 5 pSx
	(\t) print
	n 6 pSx
	(\n) print
} def

true {
0 1 3 {
	errorLocations exch get
	dup dup
	(pi[) print cvs32 print (] = ) print
	pi_hex_digit xprint
	(   ) print
	pSall
} for
} if

false {
errorLocations {
	-1 1 1 {
		1 index add
		dup dup
		(pi[) print cvs32 print (] = ) print
		pi_hex_digit xprint
		(   ) print
		pop
		% pSall
	} for
	pop
	(\n) print
} forall
} if

false {
2 1 2 {
	dup 
	S1x
	(\nS1\() print 
	exch 10 string cvs print
	(\) = ) print 
	xprint (\n) print
} for
} if

false {
	1 1 16 {
		% c
		(16**0 mod ) print
		dup 5 string cvs print
		( = ) print
		0 exch pow16_mod =
	} for
} if

false {
	1 1 16 {
		% c
		(16**1 mod ) print
		dup 5 string cvs print
		( = ) print
		1 exch pow16_mod =
	} for
} if
(execution took ) print usertime starttime sub = ( milliseconds\n) print


