%!PS PostScript document
%%DocumentMedia: a4 595 842 0 () ()
%%Orientation: Portrait

% author:  bg nerilex
% email:   bg@nerilex.org
% date:    2008-06-13 (first)
% license: GPLv3 

%    Copyright (C) 2008 - 2017 bg nerilex
%
%    This program is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    This program is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program.  If not, see <http://www.gnu.org/licenses/>.

/copyright_str (by bg nerilex, license: GPLv3 or later) def

/paper_autosize false def
/pi_stroke true def

/inch {	72 mul } def
/cm { inch 2.54 div } def
/DIN_A_ratio  2 sqrt  def
/DIN_A_0 [ 100 cm 100 cm mul DIN_A_ratio div sqrt dup DIN_A_ratio mul ] cvx def % A = 1 qm
/DIN_A { % a -- x y 	a is the number of th DIN A, x and y are the corresponding sizes
	dup 0 eq 
		{ pop DIN_A_0 }
		{ 1 sub DIN_A 2 div exch } ifelse
} def

%/ibb [
%	prompt
%	currentpagedevice
%	/ImagingBBox get dup
%	null eq {
%		
%	} {
%		pop
%		0 0		
%		currentpagedevice
%		/PageSize aload pop
%		4 array astore
%				
%	} ifelse
%] cvx def

/all_scale { 4 div } def

/papersize [
	paper_autosize
	{
		currentpagedevice
		/PageSize get
		aload pop
	}
	{
		4 DIN_A 
       		round exch round exch % dirty hack, might work
	} ifelse
] cvx def

/pi_size papersize pop 1.25 mul def 

/squaresize 1 cm all_scale def

/paper_x_odd papersize pop cvi squaresize cvi mod def
/paper_y_odd papersize exch pop cvi squaresize cvi mod def

%/lmargin
%	paper_autosize {
%		currentpagedevice /ImagingBBox get
%		dup null eq 
%		{
%		  pop
%		  papersize pop 1 cm div dup floor sub % fraction of cm of width
%		  2 div cm
%
%		}
%		{
%		  dup 0 get 
%		} ifelse
%	}
%	{
%%		pop
%		papersize pop 1 cm div dup floor sub % fraction of cm of width
%		2 div cm
%	} ifelse
%def

/lmargin 
 paper_x_odd % fraction of cm of width
 2 div
 2 cm all_scale add
def

%/rmargin
%        paper_autosize {
%             currentpagedevice /ImagingBBox get
%             dup null eq
%             {
%                  pop
%                  papersize pop 1 cm div dup floor sub % fraction of cm of width
%                  2 div cm
%
%             }
%             {
%                  dup 0 get
%             } ifelse
%       }
%       {
%%             pop
%             papersize pop 1 cm div dup floor sub % fraction of cm of width
%             2 div cm
%       } ifelse
%def


/rmargin
 lmargin
def

/tmargin
 paper_y_odd % fraction of cm of height
 2 div
 2 cm all_scale add
def
 
/bmargin
 tmargin
def


/fontsize squaresize 0.75 mul def

/getcolor {
 dup
 48 lt 1 index 58 ge or 
  {pop 0 0 1} % if not a number 
%  {(color_0) dup 6 3 index  put cvn load exec 4 1 roll pop}
  {48 sub 9 div 0.8 mul saturation 1} 
  ifelse 
} def

/drawsquare { % fieldvalue -- 
  currentpoint                                        %  fieldvalue -- fv x y
  currentpoint                                        %  fv x y     -- fv x y x y
  newpath
  moveto                                              %  fv x y x y -- fv x y
  0 squaresize -1 mul rlineto
  squaresize 0        rlineto
  0 squaresize        rlineto
  closepath
  2 index dup getcolor 3 copy sethsbcolor             %  fv x y     -- fv x y fv h s v
  fill
  5 index fontsize 3 div add 5 index squaresize sub fontsize 3 div add moveto               %  fv x y fv h s v -- fv x y fv h s v
  pop 0.5
   3 -1 roll 1 exch sub  3 1 roll 
%   3 -1 roll 1 exch sub % 3 1 roll 
%   3 -1 roll 1 exch sub % 3 1 roll 
  sethsbcolor % select darker color for num   %  fv x y fv h s v -- fv x y fv     
  (0) dup 0 3 index put show pop                      %  fv x y fv -- fv x y 
  moveto
  squaresize 0 rmoveto
  pop
} def


/drawsquareNumOnly { % fieldvalue -- 
  currentpoint  
  1 index fontsize 3 div add                          % fv x y    -- fv x y fx
  1 index squaresize sub fontsize 3 div add           % fv x y fx -- fv x y fx fy
  moveto                                              % fv x y fx fy -- fv x y
  0 0 0 setrgbcolor  % select black  for num          % fv x y -- fv x y      
  (0) dup 0 5 index put show                          % fv x y -- fv x y 
  moveto                                              % fv x y -- fv
  squaresize 0 rmoveto
  pop
} def

%--- numbers --------------------------------------------------------------------x

%[(01234 56789) (3123956789) (0123456789) (0123456789)]
[
(3.14159265358979323846264338327950288419716939937510582097494459)
(2307816406286208998628034825342117067982148086513282306647093844)
(6095505822317253594081284811174502841027019385211055596446229489)
(5493038196442881097566593344612847564823378678316527120190914564)
(8566923460348610454326648213393607260249141273724587006606315588)
(1748815209209628292540917153643678925903600113305305488204665213)
(8414695194151160943305727036575959195309218611738193261179310511)
(8548074462379962749567351885752724891227938183011949129833673362)
(4406566430860213949463952247371907021798609437027705392171762931)
(7675238467481846766940513200056812714526356082778577134275778960)
(9173637178721468440901224953430146549585371050792279689258923542)
(0199561121290219608640344181598136297747713099605187072113499999)
(9837297804995105973173281609631859502445945534690830264252230825)
(3344685035261931188171010003137838752886587533208381420617177669)
(1473035982534904287554687311595628638823537875937519577818577805)
(3217122680661300192787661119590921642019893809525720106548586327)
(8865936153381827968230301952035301852968995773622599413891249721)
(7752834791315155748572424541506959508295331168617278558890750983)
(8175463746493931925506040092770167113900984882401285836160356370)
(7660104710181942955596198946767837449448255379774726847104047534)
(6462080466842590694912933136770289891521047521620569660240580381)
(5019351125338243003558764024749647326391419927260426992279678235)
(4781636009341721641219924586315030286182974555706749838505494588)
(5869269956909272107975093029553211653449872027559602364806654991)
(1988183479775356636980742654252786255181841757467289097777279380)
(0081647060016145249192173217214772350141441973568548161361157352)
(5521334757418494684385233239073941433345477624168625189835694855)
(6209921922218427255025425688767179049460165346680498862723279178)
(6085784383827967976681454100953883786360950680064225125205117392)
(9848960841284886269456042419652850222106611863067442786220391949)
(4504712371378696095636437191728746776465757396241389086583264599)
(5813390478027590099465764078951269468398352595709825822620522489)
(4077267194782684826014769909026401363944374553050682034962524517)
(4939965143142980919065925093722169646151570985838741059788595977)
(2975498930161753928468138268683868942774155991855925245953959431)
(0499725246808459872736446958486538367362226260991246080512438843)
(9045124413654976278079771569143599770012961608944169486855584840)
(6353422072225828488648158456028506016842739452267467678895252138)
(5225499546667278239864565961163548862305774564980355936345681743)
(2411251507606947945109659609402522887971089314566913686722874894)
(0560101503308617928680920874760917824938589009714909675985261365)
(5497818931297848216829989487226588048575640142704775551323796414)
(5152374623436454285844479526586782105114135473573952311342716610)
(2135969536231442952484937187110145765403590279934403742007310578)
(5390621983874478084784896833214457138687519435064302184531910484)
(8100537061468067491927819119793995206141966342875444064374512371)
(8192179998391015919561814675142691239748940907186494231961567945)
(2080951465502252316038819301420937621378559566389377870830390697)
(9207734672218256259966150142150306803844773454920260541466592520)
(1497442850732518666002132434088190710486331734649651453905796268)
(5610055081066587969981635747363840525714591028970641401109712062)
(8043903975951567715770042033786993600723055876317635942187312514)
(7120532928191826186125867321579198414848829164470609575270695722)
(0917567116722910981690915280173506712748583222871835209353965725)
(1210835791513698820914442100675103346711031412671113699086585163)
(9831501970165151168517143765761835155650884909989859982387345528)
(3316355076479185358932261854896321329330898570642046752590709154)
(8141654985946163718027098199430992448895757128289059232332609729)
(9712084433573265489382391193259746366730583604142813883032038249)
(0375898524374417029132765618093773444030707469211201913020330380)
(1976211011004492932151608424448596376698389522868478312355265821)
(3144957685726243344189303968642624341077322697802807318915441101)
(0446823252716201052652272111660396665573092547110557853763466820)
(6531098965269186205647693125705863566201855810072936065987648611)
(7910453348850346113657686753249441668039626579787718556084552965)
(4126654085306143444318586769751456614068007002378776591344017127)
(4947042056223053899456131407112700040785473326993908145466464588)
(0797270826683063432858785698305235808933065757406795457163775254)
(2021149557615814002501262285941302164715509792592309907965473761)
(2551765675135751782966645477917450112996148903046399471329621073)
(4043751895735961458901938971311179042978285647503203198691514028)
(7080859904801094121472213179476477726224142548545403321571853061)
(4228813758504306332175182979866223717215916077166925474873898665)
(4949450114654062843366393790039769265672146385306736096571209180)
(7638327166416274888800786925602902284721040317211860820419000422)
(9661711963779213375751149595015660496318629472654736425230817703)
(6751590673502350728354056704038674351362222477158915049530984448)
(9333096340878076932599397805419341447377441842631298608099888687)
(4132604721569516239658645730216315981931951673538129741677294786)
(7242292465436680098067692823828068996400482435403701416314965897)
(9409243237896907069779422362508221688957383798623001593776471651)
(2289357860158816175578297352334460428151262720373431465319777741)
(6031990665541876397929334419521541341899485444734567383162499341)
(9131814809277771038638773431772075456545322077709212019051660962)
(8049092636019759882816133231666365286193266863360627356763035447)
(7628035045077723554710585954870279081435624014517180624643626794)
(5612753181340783303362542327839449753824372058353114771199260638)
(1334677687969597030983391307710987040859133746414428227726346594)
(7047458784778720192771528073176790770715721344473060570073349243)
(6931138350493163128404251219256517980694113528013147013047816437)
(8851852909285452011658393419656213491434159562586586557055269049)
(6520985803385072242648293972858478316305777756068887644624824685)
(7926039535277348030480290058760758251047470916439613626760449256)
(2742042083208566119062545433721315359584506877246029016187667952)
(4061634252257719542916299193064553779914037340432875262888963995)
(8794757291746426357455254079091451357111369410911939325191076020)
(8252026187985318877058429725916778131496990090192116971737278476)
(8472686084900337702424291651300500516832336435038951702989392233)
(4517220138128069650117844087451960121228599371623130171144484640)
(9038906449544400619869075485160263275052983491874078668088183385)
(1022833450850486082503930213321971551843063545500766828294930413)
(7765527939751754613953984683393638304746119966538581538420568533)
(8621867252334028308711232827892125077126294632295639898989358211)
(6745627010218356462201349671518819097303811980049734072396103685)
(4066431939509790190699639552453005450580685501956730229219139339)
(1856803449039820595510022635353619204199474553859381023439554495)
(9778377902374216172711172364343543947822181852862408514006660443)
(3258885698670543154706965747458550332323342107301545940516553790)
(6866273337995851156257843229882737231989875714159578111963583300)
(5940873068121602876496286744604774649159950549737425626901049037)
(7819868359381465741268049256487985561453723478673303904688383436)
(3465537949864192705638729317487233208376011230299113679386270894)
(3879936201629515413371424892830722012690147546684765357616477379)
(4675200490757155527819653621323926406160136358155907422020203187)
(2776052772190055614842555187925303435139844253223415762336106425)
(0639049750086562710953591946589751413103482276930624743536325691)
(6078154781811528436679570611086153315044521274739245449454236828)
(8606134084148637767009612071512491404302725386076482363414334623)
(5189757664521641376796903149501910857598442391986291642193994907)
(2362346468441173940326591840443780513338945257423995082965912285)
(0855582157250310712570126683024029295252201187267675622041542051)
(6184163484756516999811614101002996078386909291603028840026910414)
(0792886215078424516709087000699282120660418371806535567252532567)
(5328612910424877618258297651579598470356222629348600341587229805)
(3498965022629174878820273420922224533985626476691490556284250391)
(2757710284027998066365825488926488025456610172967026640765590429)
(0994568150652653053718294127033693137851786090407086671149655834)
(3434769338578171138645587367812301458768712660348913909562009939)
(3610310291616152881384379099042317473363948045759314931405297634)
(7574811935670911013775172100803155902485309066920376719220332290)
(9433467685142214477379393751703443661991040337511173547191855046)
(4490263655128162288244625759163330391072253837421821408835086573)
(9177150968288747826569959957449066175834413752239709683408005355)
(9849175417381883999446974867626551658276584835884531427756879002)
(9095170283529716344562129640435231176006651012412006597558512761)
(7858382920419748442360800719304576189323492292796501987518721272)
(6750798125547095890455635792122103334669749923563025494780249011)
(4195212382815309114079073860251522742995818072471625916685451333)
(1239480494707911915326734302824418604142636395480004480026704962)
(4820179289647669758318327131425170296923488962766844032326092752)
(4960357996469256504936818360900323809293459588970695365349406034)
(0216654437558900456328822505452556405644824651518754711962184439)
(6582533754388569094113031509526179378002974120766514793942590298)
(9695946995565761218656196733786236256125216320862869222103274889)
(2186543648022967807057656151446320469279068212073883778142335628)
(2360896320806822246801224826117718589638140918390367367222088832)
(1513755600372798394004152970028783076670944474560134556417254370)
(9069793961225714298946715435784687886144458123145935719849225284)
(7160504922124247014121478057345510500801908699603302763478708108)
(1754501193071412233908663938339529425786905076431006383519834389)
(3415961318543475464955697810382930971646514384070070736041123735)
(9984345225161050702705623526601276484830840761183013052793205427)
(4628654036036745328651057065874882256981579367897669742205750596)
(8344086973502014102067235850200724522563265134105592401902742162)
(4843914035998953539459094407046912091409387001264560016237428802)
(1092764579310657922955249887275846101264836999892256959688159205)

] dup
%--- MAIN -----------------------------------------------------------------------x


(\n\n) print
(capable of printing ) print
papersize  1 cm div floor exch 1 cm div floor
 squaresize 1 cm div div floor dup /x_tiles exch def 
  8 string cvs print
 (x) print
 squaresize 1 cm div div floor dup /y_tiles exch def
  8 string cvs print
 ( digits\n\n) print


% goto start position
lmargin
papersize exch pop tmargin sub 
moveto
%
%5 drawsquare
%4 drawsquare
%9 drawsquare
%0 drawsquare
%1 drawsquare

%prompt

/DrawPi {
{
% currentpoint squaresize sub lmargin exch
% moveto pop
 {
   currentpoint pop squaresize add % -- x position after this square would be drawn
   paper_x_odd sub
   papersize pop rmargin sub       % -- x position of the right margin
   gt
   { currentpoint exch pop squaresize sub lmargin exch
     moveto
   } if
	 % check if we are done
     currentpoint exch pop  % -- current y position
     bmargin ge
     { 
     	drawsquare
     } {
     	pop
     } ifelse
 } forall
} forall
} def

/Helvetica findfont fontsize scalefont setfont
/saturation 0.75 def
DrawPi

/Symbol findfont pi_size scalefont setfont
newpath
papersize pi_size 2 div sub 2 div exch pi_size 2 div sub 2 div exch moveto
0 0 0 setrgbcolor
(\160) true charpath clip


lmargin papersize exch pop tmargin sub moveto
/Helvetica findfont fontsize scalefont setfont
/saturation 0.4 def
DrawPi

initclip

/Helvetica findfont rmargin 0.3 mul scalefont setfont
0 0 0 setrgbcolor
papersize tmargin sub exch lmargin sub exch moveto
copyright_str stringwidth
2 div 3 mul rmargin exch sub 4 div
0 rmoveto
bmargin add currentpoint pop exch moveto

-90 rotate
(by bg nerilex, license: GPLv3 or later) show


showpage

